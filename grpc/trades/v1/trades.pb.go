// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: trades/v1/trades.proto

package tradesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	v1 "kaiko.com/go/grpc/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Side
type Response_Side int32

const (
	// Unknown side (not specified).
	Response_SIDE_UNSPECIFIED Response_Side = 0
	// Buy side.
	Response_SIDE_BUY Response_Side = 1
	// Sell side.
	Response_SIDE_SELL Response_Side = 2
)

// Enum value maps for Response_Side.
var (
	Response_Side_name = map[int32]string{
		0: "SIDE_UNSPECIFIED",
		1: "SIDE_BUY",
		2: "SIDE_SELL",
	}
	Response_Side_value = map[string]int32{
		"SIDE_UNSPECIFIED": 0,
		"SIDE_BUY":         1,
		"SIDE_SELL":        2,
	}
)

func (x Response_Side) Enum() *Response_Side {
	p := new(Response_Side)
	*p = x
	return p
}

func (x Response_Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Side) Descriptor() protoreflect.EnumDescriptor {
	return file_trades_v1_trades_proto_enumTypes[0].Descriptor()
}

func (Response_Side) Type() protoreflect.EnumType {
	return &file_trades_v1_trades_proto_enumTypes[0]
}

func (x Response_Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Response_Side.Descriptor instead.
func (Response_Side) EnumDescriptor() ([]byte, []int) {
	return file_trades_v1_trades_proto_rawDescGZIP(), []int{1, 0}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstrumentCriteria is instrument exchange, class and code, wildcard (*) can be used.
	InstrumentCriteria *v1.InstrumentCriteria `protobuf:"bytes,1,opt,name=instrument_criteria,json=instrumentCriteria,proto3" json:"instrument_criteria,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trades_v1_trades_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_trades_v1_trades_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_trades_v1_trades_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetInstrumentCriteria() *v1.InstrumentCriteria {
	if x != nil {
		return x.InstrumentCriteria
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additionnal properties, specific to the exchange.
	AdditionalProperties map[string]string `protobuf:"bytes,1,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Amount / quantity of asset bought or sold, displayed in base currency.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Instrument class, empty when instrument not mapped.
	Class string `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	// Instrument code, empty when instrument not mapped.
	Code string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Instrument exchange code, for example "cbse" (Coinbase).
	Exchange string `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// Sequence ID for event. Sortable in lexicographic order.
	SequenceId string `protobuf:"bytes,6,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// Trade ID, empty string when not present.
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// Price for the trade.
	Price float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	// Trade side.
	Side Response_Side `protobuf:"varint,9,opt,name=side,proto3,enum=trades.v1.Response_Side" json:"side,omitempty"`
	// Timestamp of trade, when provided by the exchange.
	TsExchange *v1.TimestampValue `protobuf:"bytes,10,opt,name=ts_exchange,json=tsExchange,proto3" json:"ts_exchange,omitempty"`
	// Timestamp of collection (event entered Kaiko's infrastructure), before nomalization.
	TsCollection *v1.TimestampValue `protobuf:"bytes,11,opt,name=ts_collection,json=tsCollection,proto3" json:"ts_collection,omitempty"`
	// Event generation timestamp (event created by Kaiko), after normalization.
	TsEvent *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=ts_event,json=tsEvent,proto3" json:"ts_event,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trades_v1_trades_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_trades_v1_trades_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_trades_v1_trades_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Response) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Response) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Response) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Response) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Response) GetSequenceId() string {
	if x != nil {
		return x.SequenceId
	}
	return ""
}

func (x *Response) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Response) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Response) GetSide() Response_Side {
	if x != nil {
		return x.Side
	}
	return Response_SIDE_UNSPECIFIED
}

func (x *Response) GetTsExchange() *v1.TimestampValue {
	if x != nil {
		return x.TsExchange
	}
	return nil
}

func (x *Response) GetTsCollection() *v1.TimestampValue {
	if x != nil {
		return x.TsCollection
	}
	return nil
}

func (x *Response) GetTsEvent() *timestamppb.Timestamp {
	if x != nil {
		return x.TsEvent
	}
	return nil
}

var File_trades_v1_trades_proto protoreflect.FileDescriptor

var file_trades_v1_trades_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x12, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x22, 0xf4, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x73, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x0d, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x08, 0x74, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a,
	0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x42, 0x5b, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x24, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x76, 0x31, 0xaa, 0x02,
	0x14, 0x4b, 0x61, 0x69, 0x6b, 0x6f, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trades_v1_trades_proto_rawDescOnce sync.Once
	file_trades_v1_trades_proto_rawDescData = file_trades_v1_trades_proto_rawDesc
)

func file_trades_v1_trades_proto_rawDescGZIP() []byte {
	file_trades_v1_trades_proto_rawDescOnce.Do(func() {
		file_trades_v1_trades_proto_rawDescData = protoimpl.X.CompressGZIP(file_trades_v1_trades_proto_rawDescData)
	})
	return file_trades_v1_trades_proto_rawDescData
}

var file_trades_v1_trades_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_trades_v1_trades_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_trades_v1_trades_proto_goTypes = []interface{}{
	(Response_Side)(0),            // 0: trades.v1.Response.Side
	(*Request)(nil),               // 1: trades.v1.Request
	(*Response)(nil),              // 2: trades.v1.Response
	nil,                           // 3: trades.v1.Response.AdditionalPropertiesEntry
	(*v1.InstrumentCriteria)(nil), // 4: core.v1.InstrumentCriteria
	(*v1.TimestampValue)(nil),     // 5: core.v1.TimestampValue
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_trades_v1_trades_proto_depIdxs = []int32{
	4, // 0: trades.v1.Request.instrument_criteria:type_name -> core.v1.InstrumentCriteria
	3, // 1: trades.v1.Response.additional_properties:type_name -> trades.v1.Response.AdditionalPropertiesEntry
	0, // 2: trades.v1.Response.side:type_name -> trades.v1.Response.Side
	5, // 3: trades.v1.Response.ts_exchange:type_name -> core.v1.TimestampValue
	5, // 4: trades.v1.Response.ts_collection:type_name -> core.v1.TimestampValue
	6, // 5: trades.v1.Response.ts_event:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_trades_v1_trades_proto_init() }
func file_trades_v1_trades_proto_init() {
	if File_trades_v1_trades_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trades_v1_trades_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trades_v1_trades_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trades_v1_trades_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trades_v1_trades_proto_goTypes,
		DependencyIndexes: file_trades_v1_trades_proto_depIdxs,
		EnumInfos:         file_trades_v1_trades_proto_enumTypes,
		MessageInfos:      file_trades_v1_trades_proto_msgTypes,
	}.Build()
	File_trades_v1_trades_proto = out.File
	file_trades_v1_trades_proto_rawDesc = nil
	file_trades_v1_trades_proto_goTypes = nil
	file_trades_v1_trades_proto_depIdxs = nil
}
