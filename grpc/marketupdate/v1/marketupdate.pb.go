// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: marketupdate/v1/marketupdate.proto

package marketupdatev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	v1 "kaiko.com/go/grpc/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Commodity int32

const (
	// Unknown commodity.
	Commodity_COMMODITY_UNSPECIFIED Commodity = 0
	// TRADE commodity.
	Commodity_COMMODITY_TRADE Commodity = 1
	// TOP_OF_BOOK commodity.
	Commodity_COMMODITY_TOP_OF_BOOK Commodity = 2
	// FULL_ORDER_BOOK commodity.
	Commodity_COMMODITY_FULL_ORDER_BOOK Commodity = 3
)

// Enum value maps for Commodity.
var (
	Commodity_name = map[int32]string{
		0: "COMMODITY_UNSPECIFIED",
		1: "COMMODITY_TRADE",
		2: "COMMODITY_TOP_OF_BOOK",
		3: "COMMODITY_FULL_ORDER_BOOK",
	}
	Commodity_value = map[string]int32{
		"COMMODITY_UNSPECIFIED":     0,
		"COMMODITY_TRADE":           1,
		"COMMODITY_TOP_OF_BOOK":     2,
		"COMMODITY_FULL_ORDER_BOOK": 3,
	}
)

func (x Commodity) Enum() *Commodity {
	p := new(Commodity)
	*p = x
	return p
}

func (x Commodity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Commodity) Descriptor() protoreflect.EnumDescriptor {
	return file_marketupdate_v1_marketupdate_proto_enumTypes[0].Descriptor()
}

func (Commodity) Type() protoreflect.EnumType {
	return &file_marketupdate_v1_marketupdate_proto_enumTypes[0]
}

func (x Commodity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Commodity.Descriptor instead.
func (Commodity) EnumDescriptor() ([]byte, []int) {
	return file_marketupdate_v1_marketupdate_proto_rawDescGZIP(), []int{0}
}

// OrderbookSnapshotType
type Request_OrderbookSnapshotType int32

const (
	// UNKNOWN means no snapshot is sent.
	Request_ORDERBOOK_SNAPSHOT_TYPE_UNSPECIFIED Request_OrderbookSnapshotType = 0
	// TEN_PERCENT is ob10%.
	Request_ORDERBOOK_SNAPSHOT_TYPE_TEN_PERCENT Request_OrderbookSnapshotType = 1
	// FULL is full orderbook.
	Request_ORDERBOOK_SNAPSHOT_TYPE_FULL Request_OrderbookSnapshotType = 2
)

// Enum value maps for Request_OrderbookSnapshotType.
var (
	Request_OrderbookSnapshotType_name = map[int32]string{
		0: "ORDERBOOK_SNAPSHOT_TYPE_UNSPECIFIED",
		1: "ORDERBOOK_SNAPSHOT_TYPE_TEN_PERCENT",
		2: "ORDERBOOK_SNAPSHOT_TYPE_FULL",
	}
	Request_OrderbookSnapshotType_value = map[string]int32{
		"ORDERBOOK_SNAPSHOT_TYPE_UNSPECIFIED": 0,
		"ORDERBOOK_SNAPSHOT_TYPE_TEN_PERCENT": 1,
		"ORDERBOOK_SNAPSHOT_TYPE_FULL":        2,
	}
)

func (x Request_OrderbookSnapshotType) Enum() *Request_OrderbookSnapshotType {
	p := new(Request_OrderbookSnapshotType)
	*p = x
	return p
}

func (x Request_OrderbookSnapshotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Request_OrderbookSnapshotType) Descriptor() protoreflect.EnumDescriptor {
	return file_marketupdate_v1_marketupdate_proto_enumTypes[1].Descriptor()
}

func (Request_OrderbookSnapshotType) Type() protoreflect.EnumType {
	return &file_marketupdate_v1_marketupdate_proto_enumTypes[1]
}

func (x Request_OrderbookSnapshotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Request_OrderbookSnapshotType.Descriptor instead.
func (Request_OrderbookSnapshotType) EnumDescriptor() ([]byte, []int) {
	return file_marketupdate_v1_marketupdate_proto_rawDescGZIP(), []int{0, 0}
}

// StreamMarketUpdateType is event category for a market update.
type Response_Type int32

const (
	// Unknown type.
	Response_TYPE_UNSPECIFIED Response_Type = 0
	// TRADE_BUY type.
	Response_TYPE_TRADE_BUY Response_Type = 1
	// TRADE_SELL type.
	Response_TYPE_TRADE_SELL Response_Type = 2
	// BEST_ASK type.
	Response_TYPE_BEST_ASK Response_Type = 3
	// BEST_BID type.
	Response_TYPE_BEST_BID Response_Type = 4
	// UPDATED_ASK type.
	Response_TYPE_UPDATED_ASK Response_Type = 5
	// UPDATED_BID type.
	Response_TYPE_UPDATED_BID Response_Type = 6
	// SNAPSHOT type.
	Response_TYPE_ORDERBOOK_SNAPSHOT Response_Type = 7
)

// Enum value maps for Response_Type.
var (
	Response_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_TRADE_BUY",
		2: "TYPE_TRADE_SELL",
		3: "TYPE_BEST_ASK",
		4: "TYPE_BEST_BID",
		5: "TYPE_UPDATED_ASK",
		6: "TYPE_UPDATED_BID",
		7: "TYPE_ORDERBOOK_SNAPSHOT",
	}
	Response_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":        0,
		"TYPE_TRADE_BUY":          1,
		"TYPE_TRADE_SELL":         2,
		"TYPE_BEST_ASK":           3,
		"TYPE_BEST_BID":           4,
		"TYPE_UPDATED_ASK":        5,
		"TYPE_UPDATED_BID":        6,
		"TYPE_ORDERBOOK_SNAPSHOT": 7,
	}
)

func (x Response_Type) Enum() *Response_Type {
	p := new(Response_Type)
	*p = x
	return p
}

func (x Response_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_marketupdate_v1_marketupdate_proto_enumTypes[2].Descriptor()
}

func (Response_Type) Type() protoreflect.EnumType {
	return &file_marketupdate_v1_marketupdate_proto_enumTypes[2]
}

func (x Response_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Response_Type.Descriptor instead.
func (Response_Type) EnumDescriptor() ([]byte, []int) {
	return file_marketupdate_v1_marketupdate_proto_rawDescGZIP(), []int{1, 0}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstrumentCriteria is instrument exchange, class and code, wildcard (*) can be used.
	InstrumentCriteria *v1.InstrumentCriteria `protobuf:"bytes,1,opt,name=instrument_criteria,json=instrumentCriteria,proto3" json:"instrument_criteria,omitempty"`
	// Enum indicating type of feed.
	Commodities []Commodity `protobuf:"varint,2,rep,packed,name=commodities,proto3,enum=marketupdate.v1.Commodity" json:"commodities,omitempty"`
	// Data interval. For historical data only.
	Interval *v1.DataInterval `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	// SnapshotType is the type of snapshot if commodities contains orderbook.
	SnapshotType Request_OrderbookSnapshotType `protobuf:"varint,4,opt,name=snapshot_type,json=snapshotType,proto3,enum=marketupdate.v1.Request_OrderbookSnapshotType" json:"snapshot_type,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketupdate_v1_marketupdate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_marketupdate_v1_marketupdate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_marketupdate_v1_marketupdate_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetInstrumentCriteria() *v1.InstrumentCriteria {
	if x != nil {
		return x.InstrumentCriteria
	}
	return nil
}

func (x *Request) GetCommodities() []Commodity {
	if x != nil {
		return x.Commodities
	}
	return nil
}

func (x *Request) GetInterval() *v1.DataInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Request) GetSnapshotType() Request_OrderbookSnapshotType {
	if x != nil {
		return x.SnapshotType
	}
	return Request_ORDERBOOK_SNAPSHOT_TYPE_UNSPECIFIED
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind of commodity concerned by the market update.
	Commodity Commodity `protobuf:"varint,1,opt,name=commodity,proto3,enum=marketupdate.v1.Commodity" json:"commodity,omitempty"`
	// Amount / quantity of asset bought or sold, displayed in base currency.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Instrument class, internal Kaiko classification denoting whether an instrument is a spot, future, perpetual future, or option.
	Class string `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	// Instrument code (currency pair), for example btc-usd.
	Code string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Instrument exchange code, for example "cbse" (Coinbase).
	Exchange string `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	// Sequence ID for event. Sortable in lexicographic order.
	SequenceId string `protobuf:"bytes,6,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// ID from exchange (trades only), empty string when not present.
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// Price for quote currency.
	Price float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	// Timestamp of the event as provided by the exchange.
	TsExchange *v1.TimestampValue `protobuf:"bytes,9,opt,name=ts_exchange,json=tsExchange,proto3" json:"ts_exchange,omitempty"`
	// Timestamp of collection (event entered Kaiko's infrastructure), before nomalization.
	TsCollection *v1.TimestampValue `protobuf:"bytes,10,opt,name=ts_collection,json=tsCollection,proto3" json:"ts_collection,omitempty"`
	// Event generation timestamp (event created by Kaiko), after normalization.
	TsEvent *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=ts_event,json=tsEvent,proto3" json:"ts_event,omitempty"`
	// Event category for this update.
	UpdateType Response_Type `protobuf:"varint,12,opt,name=update_type,json=updateType,proto3,enum=marketupdate.v1.Response_Type" json:"update_type,omitempty"`
	// Snapshot for this update.
	OrderbookSnapshot *Response_OrderbookSnapshot `protobuf:"bytes,13,opt,name=orderbook_snapshot,json=orderbookSnapshot,proto3" json:"orderbook_snapshot,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketupdate_v1_marketupdate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_marketupdate_v1_marketupdate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_marketupdate_v1_marketupdate_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetCommodity() Commodity {
	if x != nil {
		return x.Commodity
	}
	return Commodity_COMMODITY_UNSPECIFIED
}

func (x *Response) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Response) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Response) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Response) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Response) GetSequenceId() string {
	if x != nil {
		return x.SequenceId
	}
	return ""
}

func (x *Response) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Response) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Response) GetTsExchange() *v1.TimestampValue {
	if x != nil {
		return x.TsExchange
	}
	return nil
}

func (x *Response) GetTsCollection() *v1.TimestampValue {
	if x != nil {
		return x.TsCollection
	}
	return nil
}

func (x *Response) GetTsEvent() *timestamppb.Timestamp {
	if x != nil {
		return x.TsEvent
	}
	return nil
}

func (x *Response) GetUpdateType() Response_Type {
	if x != nil {
		return x.UpdateType
	}
	return Response_TYPE_UNSPECIFIED
}

func (x *Response) GetOrderbookSnapshot() *Response_OrderbookSnapshot {
	if x != nil {
		return x.OrderbookSnapshot
	}
	return nil
}

// Snapshot is an orderbook snapshot.
type Response_OrderbookSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asks is the list of asks of the orderbook.
	Asks []*Response_OrderbookSnapshot_Order `protobuf:"bytes,1,rep,name=asks,proto3" json:"asks,omitempty"`
	// Bids is the list of bids of the orderbook.
	Bids []*Response_OrderbookSnapshot_Order `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (x *Response_OrderbookSnapshot) Reset() {
	*x = Response_OrderbookSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketupdate_v1_marketupdate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_OrderbookSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_OrderbookSnapshot) ProtoMessage() {}

func (x *Response_OrderbookSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_marketupdate_v1_marketupdate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_OrderbookSnapshot.ProtoReflect.Descriptor instead.
func (*Response_OrderbookSnapshot) Descriptor() ([]byte, []int) {
	return file_marketupdate_v1_marketupdate_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Response_OrderbookSnapshot) GetAsks() []*Response_OrderbookSnapshot_Order {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *Response_OrderbookSnapshot) GetBids() []*Response_OrderbookSnapshot_Order {
	if x != nil {
		return x.Bids
	}
	return nil
}

// Order is a amount at a price level.
type Response_OrderbookSnapshot_Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount / quantity of asset bought or sold, displayed in base currency.
	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Price for quote currency.
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Response_OrderbookSnapshot_Order) Reset() {
	*x = Response_OrderbookSnapshot_Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketupdate_v1_marketupdate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_OrderbookSnapshot_Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_OrderbookSnapshot_Order) ProtoMessage() {}

func (x *Response_OrderbookSnapshot_Order) ProtoReflect() protoreflect.Message {
	mi := &file_marketupdate_v1_marketupdate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_OrderbookSnapshot_Order.ProtoReflect.Descriptor instead.
func (*Response_OrderbookSnapshot_Order) Descriptor() ([]byte, []int) {
	return file_marketupdate_v1_marketupdate_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Response_OrderbookSnapshot_Order) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Response_OrderbookSnapshot_Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

var File_marketupdate_v1_marketupdate_proto protoreflect.FileDescriptor

var file_marketupdate_v1_marketupdate_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x03, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x4f,
	0x4b, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42,
	0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0xc7, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x74, 0x73, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c,
	0x0a, 0x0d, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08,
	0x74, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x1a, 0xd8, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x45, 0x0a,
	0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04,
	0x62, 0x69, 0x64, 0x73, 0x1a, 0x35, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c,
	0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54,
	0x5f, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x45, 0x53, 0x54, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x42, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x07, 0x2a, 0x75, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x50,
	0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x03, 0x42, 0x73, 0x0a, 0x1e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x48, 0x01, 0x50, 0x01, 0x5a,
	0x30, 0x6b, 0x61, 0x69, 0x6b, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x76,
	0x31, 0xaa, 0x02, 0x1a, 0x4b, 0x61, 0x69, 0x6b, 0x6f, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_marketupdate_v1_marketupdate_proto_rawDescOnce sync.Once
	file_marketupdate_v1_marketupdate_proto_rawDescData = file_marketupdate_v1_marketupdate_proto_rawDesc
)

func file_marketupdate_v1_marketupdate_proto_rawDescGZIP() []byte {
	file_marketupdate_v1_marketupdate_proto_rawDescOnce.Do(func() {
		file_marketupdate_v1_marketupdate_proto_rawDescData = protoimpl.X.CompressGZIP(file_marketupdate_v1_marketupdate_proto_rawDescData)
	})
	return file_marketupdate_v1_marketupdate_proto_rawDescData
}

var file_marketupdate_v1_marketupdate_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_marketupdate_v1_marketupdate_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_marketupdate_v1_marketupdate_proto_goTypes = []interface{}{
	(Commodity)(0),                           // 0: marketupdate.v1.Commodity
	(Request_OrderbookSnapshotType)(0),       // 1: marketupdate.v1.Request.OrderbookSnapshotType
	(Response_Type)(0),                       // 2: marketupdate.v1.Response.Type
	(*Request)(nil),                          // 3: marketupdate.v1.Request
	(*Response)(nil),                         // 4: marketupdate.v1.Response
	(*Response_OrderbookSnapshot)(nil),       // 5: marketupdate.v1.Response.OrderbookSnapshot
	(*Response_OrderbookSnapshot_Order)(nil), // 6: marketupdate.v1.Response.OrderbookSnapshot.Order
	(*v1.InstrumentCriteria)(nil),            // 7: core.v1.InstrumentCriteria
	(*v1.DataInterval)(nil),                  // 8: core.v1.DataInterval
	(*v1.TimestampValue)(nil),                // 9: core.v1.TimestampValue
	(*timestamppb.Timestamp)(nil),            // 10: google.protobuf.Timestamp
}
var file_marketupdate_v1_marketupdate_proto_depIdxs = []int32{
	7,  // 0: marketupdate.v1.Request.instrument_criteria:type_name -> core.v1.InstrumentCriteria
	0,  // 1: marketupdate.v1.Request.commodities:type_name -> marketupdate.v1.Commodity
	8,  // 2: marketupdate.v1.Request.interval:type_name -> core.v1.DataInterval
	1,  // 3: marketupdate.v1.Request.snapshot_type:type_name -> marketupdate.v1.Request.OrderbookSnapshotType
	0,  // 4: marketupdate.v1.Response.commodity:type_name -> marketupdate.v1.Commodity
	9,  // 5: marketupdate.v1.Response.ts_exchange:type_name -> core.v1.TimestampValue
	9,  // 6: marketupdate.v1.Response.ts_collection:type_name -> core.v1.TimestampValue
	10, // 7: marketupdate.v1.Response.ts_event:type_name -> google.protobuf.Timestamp
	2,  // 8: marketupdate.v1.Response.update_type:type_name -> marketupdate.v1.Response.Type
	5,  // 9: marketupdate.v1.Response.orderbook_snapshot:type_name -> marketupdate.v1.Response.OrderbookSnapshot
	6,  // 10: marketupdate.v1.Response.OrderbookSnapshot.asks:type_name -> marketupdate.v1.Response.OrderbookSnapshot.Order
	6,  // 11: marketupdate.v1.Response.OrderbookSnapshot.bids:type_name -> marketupdate.v1.Response.OrderbookSnapshot.Order
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_marketupdate_v1_marketupdate_proto_init() }
func file_marketupdate_v1_marketupdate_proto_init() {
	if File_marketupdate_v1_marketupdate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_marketupdate_v1_marketupdate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketupdate_v1_marketupdate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketupdate_v1_marketupdate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_OrderbookSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketupdate_v1_marketupdate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_OrderbookSnapshot_Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_marketupdate_v1_marketupdate_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_marketupdate_v1_marketupdate_proto_goTypes,
		DependencyIndexes: file_marketupdate_v1_marketupdate_proto_depIdxs,
		EnumInfos:         file_marketupdate_v1_marketupdate_proto_enumTypes,
		MessageInfos:      file_marketupdate_v1_marketupdate_proto_msgTypes,
	}.Build()
	File_marketupdate_v1_marketupdate_proto = out.File
	file_marketupdate_v1_marketupdate_proto_rawDesc = nil
	file_marketupdate_v1_marketupdate_proto_goTypes = nil
	file_marketupdate_v1_marketupdate_proto_depIdxs = nil
}
