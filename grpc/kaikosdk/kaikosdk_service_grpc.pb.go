// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kaikosdk/kaikosdk_service.proto

package kaikosdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "kaiko.com/go/grpc/marketupdate/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamMarketUpdateServiceV1Client is the client API for StreamMarketUpdateServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamMarketUpdateServiceV1Client interface {
	// Subscribe
	Subscribe(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (StreamMarketUpdateServiceV1_SubscribeClient, error)
}

type streamMarketUpdateServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStreamMarketUpdateServiceV1Client(cc grpc.ClientConnInterface) StreamMarketUpdateServiceV1Client {
	return &streamMarketUpdateServiceV1Client{cc}
}

func (c *streamMarketUpdateServiceV1Client) Subscribe(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (StreamMarketUpdateServiceV1_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamMarketUpdateServiceV1_ServiceDesc.Streams[0], "/kaikosdk.StreamMarketUpdateServiceV1/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamMarketUpdateServiceV1SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamMarketUpdateServiceV1_SubscribeClient interface {
	Recv() (*v1.Response, error)
	grpc.ClientStream
}

type streamMarketUpdateServiceV1SubscribeClient struct {
	grpc.ClientStream
}

func (x *streamMarketUpdateServiceV1SubscribeClient) Recv() (*v1.Response, error) {
	m := new(v1.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamMarketUpdateServiceV1Server is the server API for StreamMarketUpdateServiceV1 service.
// All implementations should embed UnimplementedStreamMarketUpdateServiceV1Server
// for forward compatibility
type StreamMarketUpdateServiceV1Server interface {
	// Subscribe
	Subscribe(*v1.Request, StreamMarketUpdateServiceV1_SubscribeServer) error
}

// UnimplementedStreamMarketUpdateServiceV1Server should be embedded to have forward compatible implementations.
type UnimplementedStreamMarketUpdateServiceV1Server struct {
}

func (UnimplementedStreamMarketUpdateServiceV1Server) Subscribe(*v1.Request, StreamMarketUpdateServiceV1_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

// UnsafeStreamMarketUpdateServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMarketUpdateServiceV1Server will
// result in compilation errors.
type UnsafeStreamMarketUpdateServiceV1Server interface {
	mustEmbedUnimplementedStreamMarketUpdateServiceV1Server()
}

func RegisterStreamMarketUpdateServiceV1Server(s grpc.ServiceRegistrar, srv StreamMarketUpdateServiceV1Server) {
	s.RegisterService(&StreamMarketUpdateServiceV1_ServiceDesc, srv)
}

func _StreamMarketUpdateServiceV1_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamMarketUpdateServiceV1Server).Subscribe(m, &streamMarketUpdateServiceV1SubscribeServer{stream})
}

type StreamMarketUpdateServiceV1_SubscribeServer interface {
	Send(*v1.Response) error
	grpc.ServerStream
}

type streamMarketUpdateServiceV1SubscribeServer struct {
	grpc.ServerStream
}

func (x *streamMarketUpdateServiceV1SubscribeServer) Send(m *v1.Response) error {
	return x.ServerStream.SendMsg(m)
}

// StreamMarketUpdateServiceV1_ServiceDesc is the grpc.ServiceDesc for StreamMarketUpdateServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMarketUpdateServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaikosdk.StreamMarketUpdateServiceV1",
	HandlerType: (*StreamMarketUpdateServiceV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamMarketUpdateServiceV1_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kaikosdk/kaikosdk_service.proto",
}
